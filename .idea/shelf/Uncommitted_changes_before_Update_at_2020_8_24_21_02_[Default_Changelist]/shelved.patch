Index: queue_web/app_queue/utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nfrom app_queue import models\r\nfrom django.db.models import Min, Max\r\nimport csv\r\n\r\n\r\ndef max_order_id(db_model):\r\n    order_id_dict = db_model.objects.aggregate(Max('order_id'))\r\n    return order_id_dict['order_id__max']\r\n\r\n\r\ndef min_order_id(db_model):\r\n    order_id_dict = db_model.objects.aggregate(Min('order_id'))\r\n    return order_id_dict['order_id__min']\r\n\r\n\r\ndef new_order_id(db_model):\r\n    order_id_dict = db_model.objects.aggregate(Max('order_id'))\r\n    order_id = order_id_dict['order_id__max']\r\n    if order_id:\r\n        order_id += 1\r\n    else:\r\n        order_id = 1\r\n\r\n    return order_id\r\n\r\n\r\ndef db_add_one(db_model, data_dict):\r\n    user_obj = db_model(**data_dict)\r\n    user_obj.save()\r\n\r\n\r\ndef get_first_mission(db_model):\r\n    obj = db_model.objects.all().order_by(\"order_id\").first()\r\n    return obj\r\n\r\n\r\ndef db_to_running(obj):\r\n    data_dict = obj.get_data_dict()\r\n    data_dict.pop('id')\r\n    data_dict.pop('order_id')\r\n    db_add_one(models.RunningList, data_dict)\r\n    obj.delete()\r\n\r\n\r\ndef key_exist(string_key, condition_dict):\r\n    \"\"\"\r\n    check if the key is in condition_dict\r\n    :param string_key: string format key extract from keyword\r\n    :param condition_dict: the number key relation with field name\r\n    :return:\r\n    if exist: the corresponding field name\r\n    if not: False\r\n    \"\"\"\r\n    try:\r\n        real_key = int(string_key)\r\n    except Exception as e:\r\n        return False\r\n    else:\r\n        if real_key in condition_dict.keys():\r\n            return condition_dict[real_key]\r\n        else:\r\n            return False\r\n\r\n\r\ndef check_keyword(keyword, condition_dict):\r\n    \"\"\"\r\n    check the keyword format, and process it into django ORM filter dict\r\n    :param keyword: come from front end search word\r\n    :param condition_dict: the number key relation with field name\r\n    :return:\r\n    if right: \"field__action\" and search keyword will form filter dict, return empty error info\r\n    if wrong: add error info\r\n    \"\"\"\r\n    error_info = ''\r\n    keyword_dict = {}\r\n    filter_dict = {}\r\n    if keyword:\r\n        keyword_list = keyword.split(',')\r\n    else:\r\n        return filter_dict, error_info\r\n\r\n    for i in keyword_list:\r\n        split = i.split(':')\r\n        if len(split) == 2:\r\n            keyword_dict[split[0]] = split[1]\r\n            string_key = split[0]\r\n            value = split[1]\r\n            split_key = string_key.split('__')\r\n            real_key = split_key[0]\r\n            field = key_exist(real_key, condition_dict)\r\n            if (len(split_key) == 2) and field:\r\n                filter_method = split_key[1]\r\n                field = '%s__%s' % (condition_dict[int(real_key)], filter_method)\r\n                filter_dict[field] = value\r\n            elif len(split_key) == 1 and field:\r\n                field = '%s__icontains' % field\r\n                filter_dict[field] = value\r\n            else:\r\n                error_info = 'key error, has incorrect key'\r\n                break\r\n        else:\r\n            error_info = 'misuse of \",\" or \":\"'\r\n            break\r\n\r\n    return filter_dict, error_info\r\n\r\n\r\ndef thread_strategy(threads, host_name, cpu_left):\r\n    \"\"\"\r\n    This function is to determine how to dispatch cpu threads in the local cluster.\r\n    Since the local cluster is not yet being constructed, the strategy mainly for problems under 36 threads.\r\n    1. if sender itself have enough threads, use local instead of mpi(but it is not recommend, because the purpose\r\n    of this system is to use license more efficiently. In short, use as much threads as you can)\r\n    2. in most case, use 2 powerful CAE workstation first.\r\n    3. when use 3 hpc, or unlimited license. 2 CAE ws first, then the local, then use global\r\n    :param threads:\r\n    :param host_name:\r\n    :param cpu_left:\r\n    :return:\r\n    \"\"\"\r\n    use_mpi = False\r\n    mpi_host = []\r\n    cpu_left = float(cpu_left) - 4\r\n\r\n    if cpu_left > threads and threads <= 12:\r\n        use_mpi = False\r\n        mpi_host = []\r\n    elif threads <= 36:\r\n        with open('./other/cluster_info.csv', newline='') as csvfile:\r\n            reader = csv.DictReader(csvfile)\r\n            for row in reader:\r\n                if host_name == row['computer_name']:\r\n                    use_mpi = True\r\n        mpi_host = [['DL5FWYWG2', 10], ['DL5FWYWG2', 10], ['DL25TW5V2', 8], ['DL25TW5V2', 8]]\r\n    else:\r\n        pass                # launch new global strategy\r\n    return use_mpi, mpi_host\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- queue_web/app_queue/utils.py	(revision 72675e51ca2b3fe74439b83a8fc62feaf06002c6)
+++ queue_web/app_queue/utils.py	(date 1598253241508)
@@ -43,6 +43,10 @@
     obj.delete()
 
 
+def next_mission():
+    pass
+
+
 def key_exist(string_key, condition_dict):
     """
     check if the key is in condition_dict
Index: queue_web/app_queue/templates/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends 'base.html' %}\r\n{% load static %}\r\n{% block title %}Estra队列系统{% endblock %}\r\n\r\n{% block css %}\r\n<link href=\"{% static 'css/index2.css' %}\" rel=\"stylesheet\"/>{% endblock %}\r\n\r\n{% block login_info %}\r\n    {% if is_login == True %}\r\n        <div class=\"text-whit text-success btn user_info\">Welcome {{user_name_short}}</div>\r\n        <a id=\"btn_logout\" href=\"/logout\"\r\n           class=\"btn btn-outline-success btn_sign_up\">注销\r\n        </a>\r\n    {% else %}\r\n        <button type=\"button\" id=\"btn_login\" data-toggle=\"modal\" data-target=\"#modal_login\"\r\n                class=\"btn btn-outline-success btn_sign_up\">登陆\r\n        </button>\r\n    {% endif %}\r\n{% endblock %}\r\n\r\n{% block content %}\r\n<!--    left content-->\r\n<div class=\"block_content_left \">\r\n    <!--        content control part-->\r\n    <div class=\"block_control\">\r\n        <div class=\"input-group-prepend\">\r\n            <div class=\"search_tip\">搜索条件：</div>\r\n            <div class=\"\">\r\n                <select class=\"custom-select select_condition\" id=\"search_condition\">\r\n                    <option value=\"0\">特殊搜索</option>\r\n                    <option value=\"1\">排队号</option>\r\n                    <option selected value=\"2\">账户邮箱</option>\r\n                    <option value=\"3\">任务名称</option>\r\n                    <option value=\"4\">执行主流程</option>\r\n                    <option value=\"5\">注册时间</option>\r\n                    <option value=\"6\">开始时间</option>\r\n                    <option value=\"7\">用时</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"input-group mb-3 mt-1\">\r\n            {% csrf_token %}\r\n            <input type=\"text\" class=\"form-control input_search\" id=\"input_search_key\">\r\n            <button class=\"btn btn-outline-secondary btn_search \" type=\"button\" id=\"btn_search\"></button>\r\n            <button type=\"button\" class=\"btn btn-outline-dark btn_filter_user\"\r\n            {% if is_login == True %}\r\n                id=\"btn_filter_user\"\r\n            {% else %}\r\n                id=\"btn_filter_user_false\"\r\n            {% endif %}\r\n            >显示当前用户\r\n            </button>\r\n            <button type=\"button\" class=\"btn btn-outline-primary btn_add\"\r\n            {% if is_login == True %}\r\n                id=\"btn_add_mission\"\r\n            {% else %}\r\n                id=\"btn_add_mission_false\"\r\n            {% endif %}\r\n            >新任务\r\n            </button>\r\n        </div>\r\n\r\n    </div>\r\n    <!--        content 3 tables part-->\r\n    <div class=\"block_table table-hover table-striped table-sm mt-3\" id=\"area_3tables\">\r\n        <!--            running list table-->\r\n        <div class=\"margin_bottom\">\r\n            <button class=\"btn_collapse\" type=\"button\" data-toggle=\"collapse\"\r\n                    data-target=\"#collapse_table1\"\r\n                    aria-expanded=\"false\" aria-controls=\"collapse_table1\">\r\n            </button>\r\n            正在运行\r\n        </div>\r\n        \r\n        <div id=\"collapse_table1\" class=\"collapse show\">\r\n            <table class=\"\" id=\"table_running\">\r\n                <thead class=\"bg-success\">\r\n                <tr>\r\n                    <th class=\"item1\">排队号</th>\r\n                    <th class=\"item2\">账户邮箱</th>\r\n                    <th class=\"item3\">任务名称</th>\r\n                    <th class=\"item4\">执行主流程</th>\r\n                    <th class=\"item5\">注册时间</th>\r\n                    <th class=\"item6\">开始时间</th>\r\n                    <th class=\"item7\">用时</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {% for mission in running_list%}\r\n                <tr>\r\n                    <td class=\"item1_td\"></td>\r\n                    <td>{{mission.account_email}}</td>\r\n                    <td>{{mission.mission_name}}</td>\r\n                    <td>{{mission.exec_app}}</td>\r\n                    <td>{{mission.register_time}}</td>\r\n                    <td>{{mission.start_time}}</td>\r\n                    <td></td>\r\n                </tr>\r\n                {% endfor %}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n        <!--waiting list table-->\r\n        <div class=\"margin_bottom\">\r\n            <button class=\"btn_collapse\" type=\"button\" data-toggle=\"collapse\"\r\n                    data-target=\"#collapse_table2\"\r\n                    aria-expanded=\"false\" aria-controls=\"collapse_table2\">\r\n            </button>\r\n            等待队列\r\n        </div>\r\n        <div id=\"collapse_table2\" class=\"collapse show\">\r\n            <table class=\"\" id=\"table_waiting\">\r\n                <thead class=\"bg-warning\">\r\n                <tr>\r\n                    <th class=\"item1\">排队号</th>\r\n                    <th class=\"item2\">账户邮箱</th>\r\n                    <th class=\"item3\">任务名称</th>\r\n                    <th class=\"item4\">执行主流程</th>\r\n                    <th class=\"item5\">注册时间</th>\r\n                    <th class=\"item6\">开始时间</th>\r\n                    <th class=\"item7\">用时</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {% for mission in waiting_list %}\r\n                <tr>\r\n                    <td class=\"item1_td\">{{mission.order_id}}</td>\r\n                    <td>{{mission.account_email}}</td>\r\n                    <td>{{mission.mission_name}}</td>\r\n                    <td>{{mission.exec_app}}</td>\r\n                    <td>{{mission.register_time}}</td>\r\n                    <td>{{mission.start_time}}</td>\r\n                    <td></td>\r\n                </tr>\r\n                {% endfor %}\r\n\r\n                </tbody>\r\n\r\n            </table>\r\n        </div>\r\n        </table>\r\n        <!--            history list table-->\r\n        <div class=\"margin_bottom\">\r\n            <button class=\"btn_collapse\" type=\"button\" data-toggle=\"collapse\"\r\n                    data-target=\"#collapse_table3\"\r\n                    aria-expanded=\"false\" aria-controls=\"collapse_table3\">\r\n            </button>\r\n            历史记录\r\n        </div>\r\n        <div id=\"collapse_table3\" class=\"collapse show\">\r\n            <table class=\"\" id=\"table_history\">\r\n                <thead class=\"bg-info\">\r\n                <tr>\r\n                    <th class=\"item1\">排队号</th>\r\n                    <th class=\"item2\">账户邮箱</th>\r\n                    <th class=\"item3\">任务名称</th>\r\n                    <th class=\"item4\">执行主流程</th>\r\n                    <th class=\"item5\">注册时间</th>\r\n                    <th class=\"item6\">开始时间</th>\r\n                    <th class=\"item7\">用时</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {% for mission in history_list %}\r\n                <tr>\r\n                    <td></td>\r\n                    <td>{{mission.account_email}}</td>\r\n                    <td>{{mission.mission_name}}</td>\r\n                    <td>{{mission.exec_app}}</td>\r\n                    <td>{{mission.register_time}}</td>\r\n                    <td>{{mission.start_time}}</td>\r\n                    <td>{{mission.used_time}}</td>\r\n                </tr>\r\n                {% endfor %}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n\r\n    </div>\r\n</div>\r\n<!--side content block-->\r\n<div class=\"block_additional\">\r\n    <div class=\"fix_aside\">\r\n        <h3>附加内容</h3>\r\n        <p>内容1</p>\r\n        <p>内容2</p>\r\n        <p>内容3</p>\r\n\r\n\r\n    </div>\r\n\r\n</div>\r\n<!-- Modal -->\r\n<div class=\"modal fade\" id=\"exampleModal\" data-backdrop=\"static\" tabindex=\"-1\"\r\n     role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n    <div class=\"modal-dialog modal-dialog-centered\">\r\n        <div class=\"modal-content\">\r\n\r\n            <div class=\"modal-header\">\r\n                <h5 class=\"modal-title\" id=\"exampleModalLabel\">新任务</h5>\r\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n            </div>\r\n            <!--modal body-->\r\n            <form action=\"/add/\" method=\"post\">\r\n                {% csrf_token %}\r\n                <div class=\"modal-body\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"select_main_app\">主流程</label>\r\n                        <select class=\"custom-select\" id=\"select_main_app\" name=\"select_main_app\">\r\n                            {% for app in main_apps %}\r\n                                <option value=\"{{app}}\">{{app}}</option>\r\n                            {% endfor%}\r\n                        </select>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"input_local_file\">项目文件</label>\r\n                        <div class=\"input-group mb-3\">\r\n                            <input type=\"text\" class=\"form-control\"\r\n                                   aria-label=\"local_file\" aria-describedby=\"btn_local_file\" id=\"input_local_file\"\r\n                                   name=\"input_local_file\">\r\n                            <div class=\"input-group-append\">\r\n                                <button class=\"btn btn-outline-secondary\" type=\"button\" id=\"btn_local_file\">...\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        {% for key, list in extend_apps_dict.items %}\r\n                            <label for=\"select_{{key}}\" class=\"select_extend\" id=\"label_{{key}}\" style=\"display: none\">拓展流程</label>\r\n                            <select class=\"custom-select select_extend\" id=\"select_{{key}}\" name=\"select_{{key}}\"\r\n                                    style=\"display: none\" multiple=\"multiple\">\r\n                                <option value=\"\" class=\"{{key}}\">无</option>\r\n                                {% for app in list %}\r\n                                    <option value=\"{{app}}\" class=\"{{key}}\">{{app}}</option>\r\n                                {% endfor%}\r\n                            </select>\r\n                        {% endfor %}\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"modal-footer\">\r\n                    <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">关闭</button>\r\n                    <button type=\"submit\" class=\"btn btn-primary\" id=\"btn_mission_submit\">提交</button>\r\n                </div>\r\n                    <input type=\"text\" id=\"host_name\" name=\"host_name\" style=\"display:none\" value=\"\">\r\n                    <input type=\"text\" id=\"local_ip\" name=\"local_ip\" style=\"display:none\" value=\"\">\r\n                    <input type=\"text\" id=\"user_name\" name=\"user_name\" style=\"display:none\" value=\"{{user_name}}\">\r\n                    <input type=\"text\" id=\"cpu_left\" name=\"cpu_left\" style=\"display:none\" value=\"\">\r\n            </form>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div id=\"search_error\" style=\"display:none\">{{error_info}}</div>\r\n{% endblock content %}\r\n{% block script %}\r\n<script type=\"text/javascript\" src=\"{%static 'js/index_event.js'%}\"></script>\r\n{% endblock%}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- queue_web/app_queue/templates/index.html	(revision 72675e51ca2b3fe74439b83a8fc62feaf06002c6)
+++ queue_web/app_queue/templates/index.html	(date 1598253634128)
@@ -162,7 +162,7 @@
                 </tr>
                 </thead>
                 <tbody>
-                {% for mission in history_list %}
+                {% for mission in history_list reversed%}
                 <tr>
                     <td></td>
                     <td>{{mission.account_email}}</td>
Index: queue_web/app_queue/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import render, HttpResponse, redirect\r\nfrom django.views import View\r\nfrom django.template.context_processors import csrf\r\nfrom app_queue import models\r\nfrom app_queue import utils\r\nimport json\r\nimport os\r\n# import time\r\n\r\nfield_dict = {\r\n    0: None,\r\n    1: 'order_id',\r\n    2: 'account_email',\r\n    3: 'mission_name',\r\n    4: 'exec_app',\r\n    5: 'register_time',\r\n    6: 'start_time',\r\n    7: 'used_time',\r\n    8: 'id',\r\n    9: 'mission_data',\r\n    10: 'sender_address',\r\n}\r\n\r\nlist_obj = {\r\n    'running_list': models.RunningList.objects,\r\n    'waiting_list': models.WaitList.objects,\r\n    'history_list': models.HistoryList.objects,\r\n}\r\n\r\nthreads = 12\r\n\r\n\r\n# Create your views here.\r\ndef index(request):\r\n    user_name = request.session.get('user_name')\r\n    user_name_short = ''\r\n    is_login = False\r\n    if user_name:\r\n        is_login = True\r\n        user_name_short = user_name.split('.')[0]\r\n\r\n    main_apps = os.listdir('server_app')\r\n    extend_apps_dict = {}\r\n    for i, app in enumerate(main_apps):\r\n        extend_apps_list = []\r\n        file_list = os.listdir('server_app/%s' % app)\r\n        for file in file_list:\r\n            if file.startswith('extend_'):\r\n                app_name = file.replace('extend_', '')\r\n                extend_apps_list.append(app_name)\r\n        extend_apps_dict[app] = extend_apps_list\r\n\r\n    parameters = {\r\n        'error_info': '',\r\n        'user_name_short': user_name_short,\r\n        'user_name': user_name,\r\n        'is_login': is_login,\r\n        'main_apps': main_apps,\r\n        'extend_apps_dict': extend_apps_dict,\r\n    }\r\n    for list_name, obj in list_obj.items():\r\n        parameters[list_name] = obj.all()\r\n    return render(request, 'index.html', parameters)\r\n\r\n\r\nclass AddProject(View):\r\n    main_app = str()\r\n    extend_app = list()\r\n    file_path = str()\r\n    user_name = str()\r\n    host_name = str()\r\n    local_ip = str()\r\n    cpu_left = int()\r\n    account_email = str()\r\n    project_name = str()\r\n    mission_data = dict()\r\n\r\n    def get(self, request):\r\n        return HttpResponse('do not access by GET')\r\n\r\n    def post(self, request):\r\n        # get account email\r\n        # print(request.POST)\r\n        self.main_app = request.POST.get('select_main_app')\r\n        self.extend_app = request.POST.getlist('select_%s' % self.main_app)\r\n        self.file_path = request.POST.get('input_local_file')\r\n        self.user_name = request.POST.get('user_name')\r\n        self.host_name = request.POST.get('host_name')\r\n        self.local_ip = request.POST.get('local_ip')\r\n        self.cpu_left = request.POST.get('cpu_left')\r\n        self.account_email = self.user_name + '@estra-automotive.com'\r\n\r\n        self.mission_data = self.form_mission_data()\r\n        # TODO test connect success and add to running list\r\n\r\n        data_dict = {\r\n            # 'order_id': order_id,\r\n                     'account_email': self.account_email,\r\n                     'exec_app': '',\r\n                     'sender_address': self.local_ip,\r\n                     'mission_name': self.project_name,\r\n                     'mission_data': self.mission_data,\r\n                     }\r\n        # utils.db_add_one(models.WaitList, data_dict)\r\n\r\n        return redirect('/')\r\n\r\n    def form_mission_data(self):\r\n        project_address, file_name = os.path.split(self.file_path)\r\n        self.project_name, extension = os.path.splitext(file_name)\r\n        order_id = utils.new_order_id(models.WaitList)\r\n\r\n        use_mpi, mpi_host = utils.thread_strategy(threads, self.host_name, self.cpu_left)\r\n        main_task = {\r\n            \"software\": self.main_app,\r\n            'project_name': self.project_name,\r\n            \"project_address\": project_address,\r\n            'extension': extension,\r\n            'host_name': self.host_name,\r\n            'iterations': 1000,\r\n            \"order_id\": '105',              # order_id\r\n            'threads': threads,\r\n            \"use_mpi\": use_mpi,\r\n            \"mpi_host\": mpi_host,\r\n        }\r\n        # TODO get command\r\n        self.mission_data[0] = main_task\r\n        for i, app in enumerate(self.extend_app):\r\n            if not app:\r\n                extend_task = {\r\n                    \"software\": app,\r\n                    'project_name': self.project_name,\r\n                    \"project_address\": project_address,\r\n                    'extension': extension,\r\n                    'host_name': self.host_name,\r\n                    'iterations': 1000,\r\n                    \"order_id\": '105',\r\n                    'threads': threads,\r\n                    \"use_mpi\": use_mpi,\r\n                    \"mpi_host\": mpi_host,\r\n                }\r\n                self.mission_data[i + 1] = extend_task\r\n\r\n        return self.mission_data\r\n\r\n\r\ndef get_local_file(request):\r\n    print(request.GET.get('request'))\r\n    org_data = 'none'\r\n    response = HttpResponse(org_data)\r\n\r\n    response[\"Access-Control-Allow-Origin\"] = \"*\"\r\n    # response[\"Access-Control-Allow-Methods\"] = \"POST,GET,OPTIONS\"\r\n    # response[\"Access-Control-Max-Age\"] = \"1000\"\r\n    # response[\"Access-Control-Allow-Headers\"] = \"*\"\r\n    return response\r\n\r\n\r\ndef receive_result(request):\r\n    \"\"\"\r\n    listen to customer's local machine\r\n    1. record the result\r\n    2. move running mission from RunningList to HistoryList\r\n    :param request:\r\n    :return:\r\n    \"\"\"\r\n    if request.method == 'POST':\r\n        print(request.POST)\r\n    return HttpResponse('django server received result')\r\n\r\n\r\ndef fetch_tables(request):\r\n    \"\"\"\r\n    used for ajax to request 3 tables data.\r\n    1. get search condition, keyword, filter_current_user, user_name;\r\n    2. check the keyword format;\r\n    3. if correct, form filter dict, if not, return render with error_info\r\n    4. if correct, use filter dict to filter data from database, return render\r\n    :param request:\r\n    :return: rendered index.html, error_info which hide in index.html\r\n    if check ok, rendered index.html with 3 tables data\r\n    if wrong, add error info\r\n    \"\"\"\r\n    parameters = {\r\n        'error_info': ''\r\n    }\r\n    list_fetched = []\r\n\r\n    condition = int(request.GET.get('condition'))\r\n    keyword = request.GET.get('keyword')\r\n    filter_current_user = request.GET.get('current_user')\r\n    user_name = request.session.get('user_name')\r\n\r\n    if field_dict[condition]:\r\n        filter_dict = {\r\n            '%s__icontains' % field_dict[condition]: keyword\r\n        }\r\n    else:\r\n        filter_dict, parameters['error_info'] = utils.check_keyword(keyword, field_dict)\r\n    if parameters['error_info']:\r\n        return render(request, 'index.html', parameters)\r\n    if filter_current_user == 'true':\r\n        account_email = user_name + '@estra-automotive.com'\r\n        filter_dict['account_email'] = account_email\r\n    print('filter_dict: ', filter_dict)\r\n    for list_name, obj in list_obj.items():\r\n        try:\r\n            list_fetched = obj.filter(**filter_dict)\r\n        except Exception as e:\r\n            print(e)\r\n            parameters['error_info'] = 'fetch data failed, please check search keyword'\r\n            list_fetched = []\r\n        parameters[list_name] = list_fetched\r\n\r\n    return render(request, 'index.html', parameters)\r\n\r\n\r\ndef get_csrf(request):\r\n    csrf_token = str(csrf(request)['csrf_token'])\r\n    csrf_request_form = {\r\n        'header': {'Cookie': 'csrftoken=%s' % csrf_token},\r\n        'data': {'csrfmiddlewaretoken': csrf_token},\r\n    }\r\n    return HttpResponse(json.dumps(csrf_request_form))\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- queue_web/app_queue/views.py	(revision 72675e51ca2b3fe74439b83a8fc62feaf06002c6)
+++ queue_web/app_queue/views.py	(date 1598252176442)
@@ -5,7 +5,7 @@
 from app_queue import utils
 import json
 import os
-# import time
+import time
 
 field_dict = {
     0: None,
@@ -143,6 +143,17 @@
 
         return self.mission_data
 
+    def virtual_mission(self):
+        """
+        This function is design to solve the problem when have empty running list,
+        but without license. it need a trigger to check when have license available.
+        create virtual mission to occupy the running list, when it's done.
+        will call the next mission
+        :return:
+        """
+        time.sleep(10)      # TODO might need a thread
+        utils.next_mission()
+
 
 def get_local_file(request):
     print(request.GET.get('request'))
Index: queue_web/server_app/fluent191_solver/func_ansys_license.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- queue_web/server_app/fluent191_solver/func_ansys_license.py	(date 1596082034151)
+++ queue_web/server_app/fluent191_solver/func_ansys_license.py	(date 1596082034151)
@@ -0,0 +1,127 @@
+import subprocess
+import argparse
+import configparser
+
+
+class LicenseAnsys(object):
+    def __init__(self):
+        # -------------init variable-------------------------
+        self.config_file = r'..\config\config.ini'
+        self.server_list = list()
+        self.application = str()
+        self.license_command = str()
+        self.module_dict = dict()
+        self.license_dict = dict()              # record total number of license and how many left
+        self.license_info = str()               # record the original license info from cmd
+        self.return_value = bool()
+        # -------------init function-------------------------
+        self.parse_config()
+        self.license_info = self.get_license_info()
+        self.license_usage_dict(self.module_dict)
+        self.arg_parser()
+
+    def parse_config(self):
+        config = configparser.ConfigParser()
+        config.read(self.config_file)
+
+        self.server_list = eval(config['License']['server_list'])
+        self.application = eval(config['License']['application'])
+        self.license_command = eval(config['License']['license_command'])
+        self.module_dict = eval(config['License']['module_dict'])
+
+    def get_license_info(self):
+        info = ''
+        for i in self.server_list:
+            command = self.license_command + i
+            p = subprocess.Popen('"%s" %s' % (self.application, command), shell=True, stdout=subprocess.PIPE,
+                                 stdin=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
+            out = p.stdout.read()
+            info += out
+
+        info = info.split("\n")
+
+        return info
+
+    def print_license_info(self):
+        print('license info: ', self.license_info)
+
+    def license_usage_dict(self, module_dict):
+        self.license_dict = {}                                # clear self.license_dict
+        for item in module_dict.keys():                       # create empty list(reservoir) to reserve license number
+            self.license_dict[item] = [0, 0]
+        for row in self.license_info:                         # loop self.license_info
+            for k, v in module_dict.items():                  # loop module_dict
+                for i in v:                                   # loop the list inside module_dict
+                    self.check_usage(row, i, self.license_dict[k])
+        # print('license dict:', self.license_dict)
+
+    def check_usage(self, info, flag, reserv_list):
+        """
+        check if flag in info, if does, add one to total_lic
+        if it is being used, add one to used_lic
+        :param info:
+        :param flag:
+        :param reserv_list:
+        :return:
+        """
+        if flag in info:
+            try:
+                total_lic = int(info.split("of")[2][1])             # TODO might have bug here
+                used_lic = int(info.split("of")[3][1])
+            except Exception as e:
+                reserv_list[0] += 0
+                reserv_list[1] += 0
+            else:
+                reserv_list[0] += total_lic
+                reserv_list[1] += total_lic - used_lic
+
+    def is_license(self, license_name):
+        try:
+            usable_license = self.license_dict[license_name][1]
+            # print('license "%s" left:' % (license_name), usable_license)
+        except Exception as e:
+            print('error:', e)
+            print('the license you type is not exist')
+        else:
+            if usable_license:
+                return True
+            else:
+                return False
+
+    def is_enough(self, required_cores):
+        solver_left = self.license_dict['solver'][1]
+        if not solver_left:
+            # print('not enough solver')
+            return False
+        hpc_left = self.license_dict['hpc'][1]
+        if hpc_left:
+            core_left = 4 + 8 * 4 ** (hpc_left - 1)
+        else:
+            core_left = 4
+
+        if required_cores > core_left:
+            # print('not enough HPC')
+            return False
+        else:
+            return True
+
+    def arg_parser(self):
+        parser = argparse.ArgumentParser()
+        parser.add_argument("-c", "--cores", help="show if have enough cores compare with -c XX; "
+                                                  "Use Example: -c 4")
+        parser.add_argument("-l", "--license", help="show if have enough license compare with -l XX; "
+                                                    "Use Example: -l pre_post; here only have 4 kinds of license:"
+                                                    "'spaceclaim', 'hpc', 'pre_post', 'solver'")
+        args = parser.parse_args()
+        if args.cores:
+            cores = int(args.cores)
+            self.return_value = self.is_enough(cores)
+        if args.license:
+            self.return_value = self.is_license(args.license)
+
+
+if __name__ == '__main__':
+    return_value = bool()
+    ansys_license = LicenseAnsys()
+    # print(ansys_license.license_info)
+    print(ansys_license.return_value)
\ No newline at end of file
Index: .idea/web_queue.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$/queue_web\" isTestSource=\"false\" />\r\n    </content>\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.8\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/web_queue.iml	(revision 72675e51ca2b3fe74439b83a8fc62feaf06002c6)
+++ .idea/web_queue.iml	(date 1598231485358)
@@ -4,7 +4,7 @@
     <content url="file://$MODULE_DIR$">
       <sourceFolder url="file://$MODULE_DIR$/queue_web" isTestSource="false" />
     </content>
-    <orderEntry type="jdk" jdkName="Python 3.8" jdkType="Python SDK" />
+    <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.8\" project-jdk-type=\"Python SDK\" />\r\n  <component name=\"PyCharmProfessionalAdvertiser\">\r\n    <option name=\"shown\" value=\"true\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision 72675e51ca2b3fe74439b83a8fc62feaf06002c6)
+++ .idea/misc.xml	(date 1598231485476)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.8" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Pipenv (web_queue) (2)" project-jdk-type="Python SDK" />
   <component name="PyCharmProfessionalAdvertiser">
     <option name="shown" value="true" />
   </component>
Index: .idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/encodings.xml	(date 1598231432815)
+++ .idea/encodings.xml	(date 1598231432815)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding">
+    <file url="file://$PROJECT_DIR$/queue_web/other/computer_config.csv" charset="GBK" />
+  </component>
+</project>
\ No newline at end of file
